Once Linux (Ubuntu Tested) Server is running and up to date (USING UNPAID NGROK WITH CHANGING URLS):

**WILL NEED TO UPDATE CODE FILE PATH NAMES**

 - Downlaod python, pip, venv, nginx, certbot, python3-certbot-nginx, ufw, git, and screen:

sudo apt install python3 python3-pip python3-venv nginx certbot python3-certbot-nginx ufw git screen



 - Clone git repository

 git clone git@github.com:Nando785/CSE155_Project-RufusRouter.git



 - Configure Web Server (Nginx) as a reverse proxy with parameters, then enable the 
   configurations.

sudo nano /etc/nginx/sites-available/RufusRouter  **THIS WILL PUT YOU IN A TERMINAL TEXT EDITOR.  ADD THE LINES BELOW**

-----**COPY AND PASTE**-----

server {
    listen 80;
    server_name rufusrouter.duckdns.org;  **<--ROUTERS DOMAIN NAME**

    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
    location /static/ {
        alias /home/dbaudhuin/CSE155_Project-RufusRouter/Website/campus_app/static/;  **<--FILE PATH TO BE FILLED IN (in the cloned git repo)**
    }
}

-----**COPY AND PASTE**-----

**Press "CTRL + x" to initiate save, then press "y", then press "Enter".**

 - Create symlink between available sites and the sites that are enabled, then test

sudo ln -sf /etc/nginx/sites-available/RufusRouter /etc/nginx/sites-enabled
sudo nginx -t
sudo systemctl restart nginx



 - Get SSL Certificate and set it to autorenew:

sudo certbot --nginx -d rufusrouter.duckdns.org  **<--ROUTERS DOMAIN NAME**
sudo systemctl status certbot.timer



 - Enable UFW firewall

sudo ufw enable



 - Set up DNS so that we can have a domain to route too (USING DUCK DNS).

ps -ef | grep cr[o]n
mkdir duckdns  **OUTSIDE OF PROJECT FOLDER**
cd duckdns
nano duck.sh  **THIS WILL PUT YOU IN A TERMINAL TEXT EDITOR.  EACH CONFIG IS DIFFERENT SO FOLLOW DUCKDNS TUTORIAL**
chmod 700 duck.sh
crontab -e
*/5 * * * * ~/duckdns/duck.sh >/dev/null 2>&1



 - Run script and make sure the logs say its all good ("OK"):

 ./duck.sh
 cat duck.log



 - Enter project folder and make a virtual environment:
cd **FILE PATH TO ROOT OF PROJECT FOLDER TO BE FILLED IN**
python3 -m venv venv (The second "venv" is the name of the virtual environment and is arbitrary.)  

     - To activate this virtual environment use: source venv/bin/activate
     - To deactivate this virtual environment use: deactivate



 - While the virtual environment is active (Confirmed by seeing "venv" near the path name of 
   the terminal) install the requirements needed:

pip install -r requirements.txt



 - Start a screen so you can do more with your terminal

screen



 - Run the project and make it accessible

python3 project.py --host=0.0.0.0



 - Press "CTRL + a" and then press "d" to detatch from the screen you made



 - Start ngrok forwarding

 ngrok http 5000



 - At this point you are able to see incoming GET requests and the url that is generated for others to connect with.  It is temporary.



***QUALITY OF LIFE STUFF***

 - Make run shell script:

touch run.sh
nano run.sh

-----**COPY AND PASTE**-----

#!/bin/bash
clear
cd /path/to/your/projectGitHub  **<--FILE PATH TO BE FILLED IN**
source venv/bin/activate
screen -S flask_app -d -m bash -c 'python3 app.py --host=0.0.0.0'
echo "Flask app started in a screen session named 'flask_app'."
echo "To reattach to the Flask app session, use: screen -r flask_app"
screen -S ngrok -d -m bash -c 'ngrok http 5000'
echo "ngrok started in a screen session named 'ngrok'."
echo "To reattach to the ngrok session, use: screen -r ngrok"
sleep 2
NGROK_URL=$(curl --silent http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*' | cut -d'"' -f4)
echo "ngrok is running at $NGROK_URL"
echo "Your application is now accessible via the ngrok URL."
echo "To detach from a screen session, press 'Ctrl + a' then 'd'."

-----**COPY AND PASTE**-----

**Press "CTRL + x" to initiate save, then press "y", then press "Enter".**



 - You can now run the server with a single shell script, runable by using "./run.sh"